# -*- coding: utf-8 -*-
"""EYASE Wav2Vec2.0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qIor0UmoKsBuS87R-jksnFS-QtgZ0S_j
"""

!gdown --id 1dGEhcc3hjtZKMkojdLxdSGYo2Nk4UJxF

!mkdir -p EYASE

# Extract the .rar file into the EYASE folder
!unrar x EYASE.rar EYASE/

import pandas as pd
import numpy as np
from pathlib import Path
from tqdm import tqdm
import torchaudio
from sklearn.model_selection import train_test_split
import glob
import os
import sys

EMOTIONS = { 0 : 'ang',
             1 : 'hap',
             2 : 'neu',
             3 : 'sad'
           }
DATA_PATH = 'EYASE/EYASE'
SAMPLE_RATE = 48000

file_names = []
file_emotion = []
file_gender = []
data = []

for gender_folder in os.listdir(DATA_PATH):
    gender = "female" if gender_folder.startswith("Female") else "male"
    for file in os.listdir(os.path.join(DATA_PATH, gender_folder)):
        file_path = os.path.join(DATA_PATH, gender_folder, file)
        if file.endswith(".wav"):
            emotion = file.split("_")[1].split()[0]
            # Mapping emotion to encoded number
            emotion_encoded = list(EMOTIONS.keys())[list(EMOTIONS.values()).index(emotion)]
            name_parts = file.split("_")
            name = f"{name_parts[0]}_{name_parts[-1].split()[0]}.wav"
            file_emotion.append(emotion_encoded)
            file_names.append(name)
            file_gender.append(gender)
            data.append({"Name": file_path,
                         "Emotion": emotion_encoded})

Data = pd.DataFrame(data)

Data.head()

import torchaudio
import librosa
import IPython.display as ipd
import numpy as np
idx = np.random.randint(0, len(Data))
sample = Data.iloc[idx]
path = sample["Name"]
label = sample["Emotion"]
print(f"ID Location: {idx}")
print(f"      Label: {label}")
print()
speech, sr = torchaudio.load(path)
speech = speech[0].numpy().squeeze()
speech = librosa.resample(np.asarray(speech), orig_sr = sr,target_sr= 16_000)
ipd.Audio(data=np.asarray(speech), autoplay=True, rate=16000)

!mkdir -p working
save_path = "working/"
train_df, test_df = train_test_split(Data, test_size=0.2, random_state=101, stratify=Data["Emotion"])
train_df = train_df.reset_index(drop=True)
test_df = test_df.reset_index(drop=True)
train_df.to_csv(f"{save_path}/train.csv", sep="\t", encoding="utf-8", index=False)
test_df.to_csv(f"{save_path}/test.csv", sep="\t", encoding="utf-8", index=False)
print(train_df.shape)
print(test_df.shape)

!pip install datasets

from datasets import load_dataset

data_files = {
    "train": "working/train.csv",
    "validation": "working/test.csv",
}

dataset = load_dataset("csv", data_files=data_files, delimiter="\t")
train_dataset = dataset["train"]
eval_dataset = dataset["validation"]

print(train_dataset)
print(eval_dataset)

input_column = "Name"
output_column = "Emotion"

label_list = train_dataset.unique(output_column)
label_list.sort()  # Let's sort it for determinism
num_labels = len(label_list)
print(f"A classification problem with {num_labels} classes: {label_list}")

from transformers import AutoConfig, Wav2Vec2Processor

model_name_or_path = "elgeish/wav2vec2-large-xlsr-53-arabic"
pooling_mode = "mean"

config = AutoConfig.from_pretrained(
    model_name_or_path,
    num_labels=num_labels,
    label2id={label: i for i, label in enumerate(label_list)},
    id2label={i: label for i, label in enumerate(label_list)},
    finetuning_task="wav2vec2_clf",
)
setattr(config, 'pooling_mode', pooling_mode)

processor = Wav2Vec2Processor.from_pretrained(model_name_or_path,)
target_sampling_rate = processor.feature_extractor.sampling_rate
print(f"The target sampling rate: {target_sampling_rate}")

def speech_file_to_array_fn(path):
    speech_array, sampling_rate = torchaudio.load(path)
    resampler = torchaudio.transforms.Resample(sampling_rate, target_sampling_rate)
    speech = resampler(speech_array).squeeze().numpy()
    return speech

def label_to_id(label, label_list):

    if len(label_list) > 0:
        return label_list.index(label) if label in label_list else -1

    return label

def preprocess_function(examples):
    speech_list = [speech_file_to_array_fn(path) for path in examples[input_column]]
    target_list = [label_to_id(label, label_list) for label in examples[output_column]]

    result = processor(speech_list, sampling_rate=target_sampling_rate)
    result["labels"] = list(target_list)

    return result

train_dataset = train_dataset.map(
    preprocess_function,
    batch_size=100,
    batched=True,
    num_proc=4
)
eval_dataset = eval_dataset.map(
    preprocess_function,
    batch_size=100,
    batched=True,
    num_proc=4
)

from dataclasses import dataclass
from typing import Optional, Tuple
import torch
from transformers.file_utils import ModelOutput


@dataclass
class SpeechClassifierOutput(ModelOutput):
    loss: Optional[torch.FloatTensor] = None
    logits: torch.FloatTensor = None
    hidden_states: Optional[Tuple[torch.FloatTensor]] = None
    attentions: Optional[Tuple[torch.FloatTensor]] = None

def w_c(train_set: pd.DataFrame, class_col_name) -> torch.Tensor:
    grouped_train_set = train_set.groupby(class_col_name)
    numerator = torch.tensor([1 / g.shape[0] for _, g in grouped_train_set])
    return numerator / numerator.sum()
weights = w_c(train_df,'Emotion')
print(weights)

import torch
import torch.nn as nn
from torch.nn import BCEWithLogitsLoss, CrossEntropyLoss, MSELoss

from transformers.models.wav2vec2.modeling_wav2vec2 import (
    Wav2Vec2PreTrainedModel,
    Wav2Vec2Model
)


class Wav2Vec2ClassificationHead(nn.Module):
    """Head for wav2vec classification task."""

    def __init__(self, config):
        super().__init__()
        self.dense = nn.Linear(config.hidden_size, config.hidden_size)
        self.dropout = nn.Dropout(config.final_dropout)
        self.out_proj = nn.Linear(config.hidden_size, config.num_labels)

    def forward(self, features, **kwargs):
        x = features
        x = self.dropout(x)
        x = self.dense(x)
        x = torch.tanh(x)
        x = self.dropout(x)
        x = self.out_proj(x)
        return x


class Wav2Vec2ForSpeechClassification(Wav2Vec2PreTrainedModel):
    def __init__(self, config):
        super().__init__(config)
        self.num_labels = config.num_labels
        self.pooling_mode = config.pooling_mode
        self.config = config

        self.wav2vec2 = Wav2Vec2Model(config)
        self.classifier = Wav2Vec2ClassificationHead(config)

        self.init_weights()

    def freeze_feature_extractor(self):
        self.wav2vec2.feature_extractor._freeze_parameters()

    def merged_strategy(
            self,
            hidden_states,
            mode="mean"
    ):
        if mode == "mean":
            outputs = torch.mean(hidden_states, dim=1)
        elif mode == "sum":
            outputs = torch.sum(hidden_states, dim=1)
        elif mode == "max":
            outputs = torch.max(hidden_states, dim=1)[0]
        else:
            raise Exception(
                "The pooling method hasn't been defined! Your pooling mode must be one of these ['mean', 'sum', 'max']")

        return outputs

    def forward(
            self,
            input_values,
            attention_mask=None,
            output_attentions=None,
            output_hidden_states=None,
            return_dict=None,
            labels=None,
    ):
        return_dict = return_dict if return_dict is not None else self.config.use_return_dict
        outputs = self.wav2vec2(
            input_values,
            attention_mask=attention_mask,
            output_attentions=output_attentions,
            output_hidden_states=output_hidden_states,
            return_dict=return_dict,
        )
        hidden_states = outputs[0]
        hidden_states = self.merged_strategy(hidden_states, mode=self.pooling_mode)
        logits = self.classifier(hidden_states)

        loss = None
        if labels is not None:
            if self.config.problem_type is None:
                if self.num_labels == 1:
                    self.config.problem_type = "regression"
                elif self.num_labels > 1 and (labels.dtype == torch.long or labels.dtype == torch.int):
                    self.config.problem_type = "single_label_classification"
                else:
                    self.config.problem_type = "multi_label_classification"

            if self.config.problem_type == "regression":
                loss_fct = MSELoss()
                loss = loss_fct(logits.view(-1, self.num_labels), labels)
            elif self.config.problem_type == "single_label_classification":
                loss_fct = CrossEntropyLoss(weight = weights.cuda())
                loss = loss_fct(logits.view(-1, self.num_labels), labels.view(-1))
            elif self.config.problem_type == "multi_label_classification":
                loss_fct = BCEWithLogitsLoss()
                loss = loss_fct(logits, labels)

        if not return_dict:
            output = (logits,) + outputs[2:]
            return ((loss,) + output) if loss is not None else output

        return SpeechClassifierOutput(
            loss=loss,
            logits=logits,
            hidden_states=outputs.hidden_states,
            attentions=outputs.attentions,
        )

from dataclasses import dataclass
from typing import Dict, List, Optional, Union
import torch

import transformers
from transformers import Wav2Vec2Processor


@dataclass
class DataCollatorCTCWithPadding:
    processor: Wav2Vec2Processor
    padding: Union[bool, str] = True
    max_length: Optional[int] = None
    max_length_labels: Optional[int] = None
    pad_to_multiple_of: Optional[int] = None
    pad_to_multiple_of_labels: Optional[int] = None

    def __call__(self, features: List[Dict[str, Union[List[int], torch.Tensor]]]) -> Dict[str, torch.Tensor]:
        input_features = [{"input_values": feature["input_values"]} for feature in features]
        label_features = [feature["labels"] for feature in features]

        d_type = torch.long if isinstance(label_features[0], int) else torch.float

        batch = self.processor.pad(
            input_features,
            padding=self.padding,
            max_length=self.max_length,
            pad_to_multiple_of=self.pad_to_multiple_of,
            return_tensors="pt",
        )

        batch["labels"] = torch.tensor(label_features, dtype=d_type)

        return batch

data_collator = DataCollatorCTCWithPadding(processor=processor, padding=True)

is_regression = False

import numpy as np
from transformers import EvalPrediction


def compute_metrics(p: EvalPrediction):
    preds = p.predictions[0] if isinstance(p.predictions, tuple) else p.predictions
    preds = np.squeeze(preds) if is_regression else np.argmax(preds, axis=1)

    if is_regression:
        return {"mse": ((preds - p.label_ids) ** 2).mean().item()}
    else:
        return {"accuracy": (preds == p.label_ids).astype(np.float32).mean().item()}

model = Wav2Vec2ForSpeechClassification.from_pretrained(
    model_name_or_path,
    config=config,
)

model.freeze_feature_extractor()

from typing import Any, Dict, Union

import torch
from packaging import version
from torch import nn

from transformers import Trainer, is_apex_available

if is_apex_available():
    from apex import amp

if version.parse(torch.__version__) >= version.parse("1.6"):
    _is_native_amp_available = True
    from torch.cuda.amp import autocast


class CustomTrainer(Trainer):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        # Use the built-in fp16 flag from training_args
        self.use_amp = self.args.fp16
        if self.use_amp:
            # Initialize GradScaler for native AMP (fp16)
            self.scaler = torch.cuda.amp.GradScaler()

    def training_step(
        self,
        model: nn.Module,
        inputs: Dict[str, Union[torch.Tensor, Any]],
        num_items_in_batch: int = 1,  # extra parameter to match the expected signature
    ) -> torch.Tensor:
        """
        Perform a training step on a batch of inputs.

        Args:
            model (:obj:`nn.Module`):
                The model to train.
            inputs (:obj:`Dict[str, Union[torch.Tensor, Any]]`):
                The inputs and targets of the model.
            num_items_in_batch (:obj:`int`, optional):
                The number of items in the current batch.

        Return:
            :obj:`torch.Tensor`: The tensor with training loss on this batch.
        """
        model.train()
        inputs = self._prepare_inputs(inputs)

        # Use autocast if fp16 is enabled
        if self.use_amp:
            with autocast():
                loss = self.compute_loss(model, inputs)
        else:
            loss = self.compute_loss(model, inputs)

        # Ensure the loss is a scalar tensor
        if isinstance(loss, torch.Tensor):
            loss = loss.mean()

        # Adjust loss for gradient accumulation
        if self.args.gradient_accumulation_steps > 1:
            loss = loss / self.args.gradient_accumulation_steps

        # Backward pass: use the GradScaler if using AMP, otherwise proceed normally.
        if self.use_amp:
            self.scaler.scale(loss).backward()
        elif hasattr(self, "use_apex") and self.use_apex:
            with amp.scale_loss(loss, self.optimizer) as scaled_loss:
                scaled_loss.backward()
        elif hasattr(self, "deepspeed") and self.deepspeed:
            self.deepspeed.backward(loss)
        else:
            loss.backward()

        return loss.detach()

!pip install transformers --upgrade

from transformers import Trainer, TrainingArguments

training_args = TrainingArguments(
    output_dir="working/",
    per_device_train_batch_size=4,
    per_device_eval_batch_size=4,
    gradient_accumulation_steps=2,
    # Replace 'evaluation_strategy' with 'eval_strategy'
    eval_strategy="steps",
    num_train_epochs=15,
    fp16=True,  # Enable native AMP
    save_steps=500,
    eval_steps=500,
    logging_steps=10,
    learning_rate=1e-4,
    save_total_limit=2,
)
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=train_dataset,
    eval_dataset=eval_dataset,
    tokenizer=processor.feature_extractor,  # or whichever tokenizer/processor you use
    data_collator=data_collator,
    compute_metrics=compute_metrics,
)
trainer.train()

import librosa
from sklearn.metrics import classification_report

test_dataset = load_dataset("csv", data_files={"test": "working/test.csv"}, delimiter="\t")["test"]
test_dataset

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print(f"Device: {device}")

def speech_file_to_array_fn(batch):
    speech_array, sampling_rate = librosa.load(batch["Name"])
    speech_array = librosa.resample(np.asarray(speech_array), orig_sr = sampling_rate,target_sr= processor.feature_extractor.sampling_rate)
    speech_array = speech_array.squeeze()
    batch["speech"] = speech_array
    return batch


def predict(batch):
    features = processor(batch["speech"], sampling_rate=processor.feature_extractor.sampling_rate, return_tensors="pt", padding=True)

    input_values = features.input_values.to(device)

    with torch.no_grad():
        logits = model(input_values).logits

    pred_ids = torch.argmax(logits, dim=-1).detach().cpu().numpy()
    batch["predicted"] = pred_ids
    return batch

test_dataset = test_dataset.map(speech_file_to_array_fn)

result = test_dataset.map(predict, batched=True, batch_size=8)

label_names = [config.id2label[i] for i in range(config.num_labels)]
label_names

config.label2id

label_names=['0', '1', '2','3']

print(classification_report(result["Emotion"], result["predicted"], target_names=label_names))

SAVE_PATH = os.path.join(os.getcwd(),'models')
os.makedirs('models',exist_ok=True)
torch.save(model.state_dict(),os.path.join(SAVE_PATH,'cnn_transf_parallel_model.pt'))
print('Model is saved to {}'.format(os.path.join(SAVE_PATH,'cnn_transf_parallel_model.pt')))

LOAD_PATH = os.path.join(os.getcwd(),'models')
# Assuming Wav2Vec2ForSpeechClassification is the intended model class
model = Wav2Vec2ForSpeechClassification.from_pretrained(
    model_name_or_path,  # Replace with your actual model_name_or_path
    config=config,  # Assuming 'config' is available from a previous cell
)
model.load_state_dict(torch.load(os.path.join(LOAD_PATH,'cnn_transf_parallel_model.pt')))
print('Model is loaded from {}'.format(os.path.join(LOAD_PATH,'cnn_transf_parallel_model.pt')))

